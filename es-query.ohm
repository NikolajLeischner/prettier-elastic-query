ESQueryGrammar {
    ESQuery = query

    reservedWord = "AND" | "OR" | "NOT" | "TO"
    boolOperator = "AND" | "OR"
    orSpace = space+
    orLine = "|"

    // STRING LITERALS
    sourceCharacter = any
    nonEscapeCharacter = ~(singleEscapeCharacter) sourceCharacter
    characterEscapeSequence = singleEscapeCharacter
                            | nonEscapeCharacter
    singleEscapeCharacter = "\"" | "\\"
    doubleStringCharacter = ~("\"" | "\\") sourceCharacter -- nonEscaped
                          | "\\" characterEscapeSequence -- Escaped
    singleESEscapeCharacter = " " | "+" | "-" | "=" | "!" | "(" | ")" | "{" | "}"
                            | "[" | "]" | "^" | "\"" | "~" | "*" | "?" | ":" | "\\" | "/"
    escapedESStringCharacter = "\\" singleESEscapeCharacter
    regexCharacter = "*" | "?"

    unquotedString = ~reservedWord (escapedESStringCharacter | regexCharacter | alnum | "_" | "." | "-" | "â€™")+
    quotedString = "\"" doubleStringCharacter* "\""

    detachedCond = quotedString | unquotedString

    // UTILS
    spaced<x> = space+ x space+
    parented<x> = "(" space* x space* ")"

    spacedBool = spaced<boolOperator>
    genericBoolOp = spacedBool | orSpace | orLine

    // FIELD QUERY
    fieldName = ~reservedWord (alnum | "." | "_")+ &":"
    fieldCond = fieldName ":" subquery

    // RANGE QUERY
    rangeValue = ~space ((alnum | "/" | "-" | ":" | "+")+ | "*")
    rangeCond = "[" space* rangeValue spaced<"TO"> rangeValue space* "]"

    // CONDITIONS
    genericCond = fieldCond | rangeCond | detachedCond
    cond = parented<genericCond> | genericCond

    simpleNegation = "-" subquery
    simpleMust = "+" subquery
    longNegation = "NOT" space+ subquery
    markedCond = longNegation | simpleNegation | simpleMust

    queryElement = markedCond | cond
	subquery = parented<query> | queryElement
    query = nonemptyListOf<subquery, genericBoolOp> | parented<query>
}

